networks:
  default:
    name: docker-default-network
    external: true

services:

  postgres-customers:
    image: postgres-xa:14.1
    build:
      context: src/test/docker/postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: customer
      POSTGRES_DB: customer
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 30s
      retries: 5
    mem_limit: 512m
    mem_reservation: 128m

  postgres-logentries:
    image: postgres-xa:14.1
    build:
      context: src/test/docker/postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: logentry
      POSTGRES_DB: logentry
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 30s
      retries: 5
    mem_limit: 512m
    mem_reservation: 128m


  kafka:
    hostname: kafka
    image: vectorized/redpanda:v22.1.7
    entrypoint:
      - /bin/sh
      - -c
      - |
        (while [ true ]; do sleep 5; \
        rpk topic create orders --replicas 1;  \
        rpk topic create reservations --replicas 1; sleep 10; \
        done; ) & \
        /entrypoint.sh redpanda start \
        --smp '1' \
        --memory 400M \
        --reserve-memory 0M \
        --node-id '0' \
        --kafka-addr PLAINTEXT://0.0.0.0:9092  \
        --advertise-kafka-addr PLAINTEXT://kafka:9092
    expose:
      - 9092
    mem_limit: 512m
    mem_reservation: 512m
    cpus: 0.5

  kafka-console:
    image: docker.redpanda.com/vectorized/console:v2.1.1
    environment:
      KAFKA_BROKERS: "kafka:9092"
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.kafka-console.loadbalancer.server.port=8080"
      - "traefik.http.routers.kafka-console.rule=Host(`kafka-console.localhost.direct`)"
      - "traefik.http.routers.kafka-console.entrypoints=websecure"
    depends_on:
      - kafka
    expose:
      - 8080
    ports:
      - 9090:8080
    mem_limit: 512m
    mem_reservation: 128m


---
openapi: 3.0.3
info:
  title: Example API
  description: This is a sample server for a pet store.
  contact:
    name: Example API Support
    url: http://exampleurl.com/contact
    email: techsupport@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
tags:
- name: widget
  description: Widget operations.
- name: gasket
  description: Operations related to gaskets
paths:
  /generisch/{fachschluessel}/draft:
    get:
      parameters:
      - name: fachschluessel
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datensatz'
    post:
      parameters:
      - name: fachschluessel
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Datensatz'
      responses:
        "201":
          description: Created
  /json-payload-ohne-bean-bindings/bodies:
    post:
      tags:
      - Body Resource
      summary: erzeugt ein neues Objekt
      description: |-
        Ein neues Objekt vom Typ wird angelegt und mit einer ID versehen.
        Die ID wird im Location Header mitgeteilt.
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        default:
          description: "Daten waren lesbar, Objekt wurde gespeichert."
  /json-payload-ohne-bean-bindings/bodies/{id}:
    get:
      tags:
      - Body Resource
      summary: liest ein vorher gespeichertes Objekt
      description: Ein Objekt wird anhand der ID gelesen und zur√ºckgegeben.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        default:
          description: "Daten waren lesbar, Objekt wurde gespeichert."
        "404":
          description: Kein Objekt mit dieser ID gefunden.
  /json-payload-ohne-bean-bindings/fields:
    post:
      tags:
      - Field Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        "200":
          description: OK
  /json-payload-ohne-bean-bindings/fields/{id}:
    get:
      tags:
      - Field Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
components:
  schemas:
    Datensatz:
      type: object
      properties:
        id:
          format: int64
          type: integer
        fachschluessel:
          $ref: '#/components/schemas/UUID'
        daten:
          type: string
    JsonNode:
      type: object
      properties:
        empty:
          type: boolean
        valueNode:
          type: boolean
        containerNode:
          type: boolean
        missingNode:
          type: boolean
        array:
          type: boolean
        object:
          type: boolean
        nodeType:
          $ref: '#/components/schemas/JsonNodeType'
        pojo:
          type: boolean
        number:
          type: boolean
        integralNumber:
          type: boolean
        floatingPointNumber:
          type: boolean
        short:
          type: boolean
        int:
          type: boolean
        long:
          type: boolean
        float:
          type: boolean
        double:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        textual:
          type: boolean
        boolean:
          type: boolean
        "null":
          type: boolean
        binary:
          type: boolean
    JsonNodeType:
      enum:
      - ARRAY
      - BINARY
      - BOOLEAN
      - MISSING
      - "NULL"
      - NUMBER
      - OBJECT
      - POJO
      - STRING
      type: string
    Organisation:
      type: object
      properties:
        vorname:
          type: string
        nachname:
          type: string
        freifeld:
          $ref: '#/components/schemas/JsonNode'
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
